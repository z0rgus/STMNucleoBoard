
Breadboard Activity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bd8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08000d60  08000d60  00001d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000eac  08000eac  00002024  2**0
                  CONTENTS
  4 .ARM          00000008  08000eac  08000eac  00001eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000eb4  08000eb4  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eb4  08000eb4  00001eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000eb8  08000eb8  00001eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08000ebc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000024  08000ee0  00002024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000ee0  0000206c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c33  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000096b  00000000  00000000  00003c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  000045f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000131  00000000  00000000  000047b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c11  00000000  00000000  000048e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000031de  00000000  00000000  000294fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e210a  00000000  00000000  0002c6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e7e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004e8  00000000  00000000  0010e828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0010ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d48 	.word	0x08000d48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08000d48 	.word	0x08000d48

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <GPIO_Output_Init>:
// Note -- if the clock is not enabled the 16 GPIO pins are non-functional!
volatile int red_flashing = 0; // 0 is not flashing, 1 is flashing
volatile int green_flashing = 0;

void GPIO_Output_Init( GPIO_TypeDef *GPIO, uint32_t pin )
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
	// Enable the peripheral clocks of for GPIO
	if ( GPIO == GPIOA )
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80001fc:	d106      	bne.n	800020c <GPIO_Output_Init+0x20>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN ;
 80001fe:	4b36      	ldr	r3, [pc, #216]	@ (80002d8 <GPIO_Output_Init+0xec>)
 8000200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000202:	4a35      	ldr	r2, [pc, #212]	@ (80002d8 <GPIO_Output_Init+0xec>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800020a:	e01f      	b.n	800024c <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOB )
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4a33      	ldr	r2, [pc, #204]	@ (80002dc <GPIO_Output_Init+0xf0>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d106      	bne.n	8000222 <GPIO_Output_Init+0x36>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN ;
 8000214:	4b30      	ldr	r3, [pc, #192]	@ (80002d8 <GPIO_Output_Init+0xec>)
 8000216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000218:	4a2f      	ldr	r2, [pc, #188]	@ (80002d8 <GPIO_Output_Init+0xec>)
 800021a:	f043 0302 	orr.w	r3, r3, #2
 800021e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000220:	e014      	b.n	800024c <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOC )
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4a2e      	ldr	r2, [pc, #184]	@ (80002e0 <GPIO_Output_Init+0xf4>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d106      	bne.n	8000238 <GPIO_Output_Init+0x4c>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN ;
 800022a:	4b2b      	ldr	r3, [pc, #172]	@ (80002d8 <GPIO_Output_Init+0xec>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022e:	4a2a      	ldr	r2, [pc, #168]	@ (80002d8 <GPIO_Output_Init+0xec>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000236:	e009      	b.n	800024c <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOD )
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4a2a      	ldr	r2, [pc, #168]	@ (80002e4 <GPIO_Output_Init+0xf8>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d145      	bne.n	80002cc <GPIO_Output_Init+0xe0>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN ;
 8000240:	4b25      	ldr	r3, [pc, #148]	@ (80002d8 <GPIO_Output_Init+0xec>)
 8000242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000244:	4a24      	ldr	r2, [pc, #144]	@ (80002d8 <GPIO_Output_Init+0xec>)
 8000246:	f043 0308 	orr.w	r3, r3, #8
 800024a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	else
		return ;

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIO->MODER &= ~( (uint32_t)3 << ( 2 * pin ) ) ;  // clear to input mode (00)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	2103      	movs	r1, #3
 8000256:	fa01 f303 	lsl.w	r3, r1, r3
 800025a:	43db      	mvns	r3, r3
 800025c:	401a      	ands	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
	GPIO->MODER |= (uint32_t)1 << ( 2 * pin ) ;      //  Output(01)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	2101      	movs	r1, #1
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	431a      	orrs	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIO->OSPEEDR &= ~( (uint32_t)3 << ( 2 * pin ) ) ;	// set to cleared which is low speed
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689a      	ldr	r2, [r3, #8]
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	2103      	movs	r1, #3
 8000280:	fa01 f303 	lsl.w	r3, r1, r3
 8000284:	43db      	mvns	r3, r3
 8000286:	401a      	ands	r2, r3
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	609a      	str	r2, [r3, #8]
	GPIO->OSPEEDR |=   (uint32_t)3 << ( 2 * pin ) ;  // High speed
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	689a      	ldr	r2, [r3, #8]
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	2103      	movs	r1, #3
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	431a      	orrs	r2, r3
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	609a      	str	r2, [r3, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIO->OTYPER &= ~( (uint32_t)1 << pin ) ;       // Push-pull
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	685a      	ldr	r2, [r3, #4]
 80002a4:	2101      	movs	r1, #1
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	605a      	str	r2, [r3, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIO->PUPDR   &= ~( (uint32_t)3 << ( 2 * pin ) ) ;  // No pull-up, no pull-down
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	2103      	movs	r1, #3
 80002be:	fa01 f303 	lsl.w	r3, r1, r3
 80002c2:	43db      	mvns	r3, r3
 80002c4:	401a      	ands	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	e000      	b.n	80002ce <GPIO_Output_Init+0xe2>
		return ;
 80002cc:	bf00      	nop
}
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	40021000 	.word	0x40021000
 80002dc:	48000400 	.word	0x48000400
 80002e0:	48000800 	.word	0x48000800
 80002e4:	48000c00 	.word	0x48000c00

080002e8 <LED_Init>:

// set up PA5, PA6, and PA7 to drive LEDs
void LED_Init(void){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	GPIO_Output_Init( GPIOA, NUCLEO_GREEN_LED_PIN ) ;	// hard wired PA5 to on-board LD2 LED
 80002ec:	2105      	movs	r1, #5
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f2:	f7ff ff7b 	bl	80001ec <GPIO_Output_Init>
	GPIO_Output_Init( GPIOA, ARDUINO_D12 ) ;		// init PA6 as output (D12)
 80002f6:	2106      	movs	r1, #6
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002fc:	f7ff ff76 	bl	80001ec <GPIO_Output_Init>
	GPIO_Output_Init( GPIOA, ARDUINO_D11 ) ;		// init PA7 as output (D11)
 8000300:	2107      	movs	r1, #7
 8000302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000306:	f7ff ff71 	bl	80001ec <GPIO_Output_Init>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}

0800030e <Red_LED_On>:

//******************************************************************************************
// Turn Green LED On and GPIOA 6 and 7 to ON
//******************************************************************************************
// Turn only the red LED on
void Red_LED_On(void){
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (uint32_t)1 << ARDUINO_D11 ;	// PA6 (Red LED)
 8000312:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800031c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000320:	6153      	str	r3, [r2, #20]
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <Red_LED_Off>:

// Turn only the red LED off
void Red_LED_Off(void){
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~( (uint32_t)1 << ARDUINO_D11 ) ;	// PA6 (Red LED)
 8000330:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800033a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800033e:	6153      	str	r3, [r2, #20]
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr

0800034a <Green_LED_On>:

// Turn only the green LED on
void Green_LED_On(void){
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (uint32_t)1 << ARDUINO_D12 ; // PA (Green LED)
 800034e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800035c:	6153      	str	r3, [r2, #20]
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <Green_LED_Off>:

// Turn only the green LED off
void Green_LED_Off(void){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~( (uint32_t)1 << ARDUINO_D12) ; // PA5 (Green LED)
 800036c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800037a:	6153      	str	r3, [r2, #20]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <LED_Flash_Handler>:
// Handler for toggling
void LED_Flash_Handler(void) {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
    if (red_flashing) {
 800038c:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <LED_Flash_Handler+0x20>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <LED_Flash_Handler+0x10>
        Red_LED_Toggle();
 8000394:	f000 f80c 	bl	80003b0 <Red_LED_Toggle>
    }
    if (green_flashing) {
 8000398:	4b04      	ldr	r3, [pc, #16]	@ (80003ac <LED_Flash_Handler+0x24>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <LED_Flash_Handler+0x1c>
        Green_LED_Toggle();
 80003a0:	f000 f815 	bl	80003ce <Green_LED_Toggle>
    }
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000040 	.word	0x20000040
 80003ac:	20000044 	.word	0x20000044

080003b0 <Red_LED_Toggle>:

// Toggle only the red LED
void Red_LED_Toggle(void){
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= (uint32_t)1 << ARDUINO_D11 ;	// PA6 (Red LED)
 80003b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003be:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 80003c2:	6153      	str	r3, [r2, #20]
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <Green_LED_Toggle>:

// Toggle only the green LED
void Green_LED_Toggle(void){
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0

	GPIOA->ODR ^= (uint32_t)1 << ARDUINO_D12;
 80003d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003dc:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80003e0:	6153      	str	r3, [r2, #20]

	 // PA5 (Green LED)
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80003f2:	4b6b      	ldr	r3, [pc, #428]	@ (80005a0 <System_Clock_Init+0x1b4>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a6a      	ldr	r2, [pc, #424]	@ (80005a0 <System_Clock_Init+0x1b4>)
 80003f8:	f023 0307 	bic.w	r3, r3, #7
 80003fc:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80003fe:	4b68      	ldr	r3, [pc, #416]	@ (80005a0 <System_Clock_Init+0x1b4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a67      	ldr	r2, [pc, #412]	@ (80005a0 <System_Clock_Init+0x1b4>)
 8000404:	f043 0302 	orr.w	r3, r3, #2
 8000408:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 800040a:	4b66      	ldr	r3, [pc, #408]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a65      	ldr	r2, [pc, #404]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000414:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000416:	bf00      	nop
 8000418:	4b62      	ldr	r3, [pc, #392]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000420:	2b00      	cmp	r3, #0
 8000422:	d0f9      	beq.n	8000418 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000424:	2310      	movs	r3, #16
 8000426:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000428:	4b5e      	ldr	r3, [pc, #376]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	4a5d      	ldr	r2, [pc, #372]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800042e:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8000432:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000434:	4b5b      	ldr	r3, [pc, #364]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000436:	685a      	ldr	r2, [r3, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	061b      	lsls	r3, r3, #24
 800043c:	4959      	ldr	r1, [pc, #356]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800043e:	4313      	orrs	r3, r2
 8000440:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000442:	4b58      	ldr	r3, [pc, #352]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a57      	ldr	r2, [pc, #348]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000448:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800044c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 800044e:	bf00      	nop
 8000450:	4b54      	ldr	r3, [pc, #336]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000458:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800045c:	d0f8      	beq.n	8000450 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800045e:	4b51      	ldr	r3, [pc, #324]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	4a50      	ldr	r2, [pc, #320]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000464:	f023 0303 	bic.w	r3, r3, #3
 8000468:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800046a:	4b4e      	ldr	r3, [pc, #312]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	4a4d      	ldr	r2, [pc, #308]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000470:	f043 0302 	orr.w	r3, r3, #2
 8000474:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000476:	4b4b      	ldr	r3, [pc, #300]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000478:	68db      	ldr	r3, [r3, #12]
 800047a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800047e:	4a49      	ldr	r2, [pc, #292]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000480:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000484:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000486:	4b47      	ldr	r3, [pc, #284]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800048e:	4a45      	ldr	r2, [pc, #276]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000490:	f043 0310 	orr.w	r3, r3, #16
 8000494:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8000496:	4b43      	ldr	r3, [pc, #268]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	4a42      	ldr	r2, [pc, #264]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800049c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80004a0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 80004a2:	4b40      	ldr	r3, [pc, #256]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	4a3f      	ldr	r2, [pc, #252]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004ac:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 80004ae:	4b3d      	ldr	r3, [pc, #244]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a3c      	ldr	r2, [pc, #240]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004b8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80004ba:	bf00      	nop
 80004bc:	4b39      	ldr	r3, [pc, #228]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0f9      	beq.n	80004bc <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80004c8:	4b36      	ldr	r3, [pc, #216]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	4a35      	ldr	r2, [pc, #212]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004ce:	f023 0303 	bic.w	r3, r3, #3
 80004d2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 80004d4:	4b33      	ldr	r3, [pc, #204]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	4a32      	ldr	r2, [pc, #200]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004da:	f043 0303 	orr.w	r3, r3, #3
 80004de:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80004e0:	bf00      	nop
 80004e2:	4b30      	ldr	r3, [pc, #192]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004e4:	689b      	ldr	r3, [r3, #8]
 80004e6:	f003 030c 	and.w	r3, r3, #12
 80004ea:	2b0c      	cmp	r3, #12
 80004ec:	d1f9      	bne.n	80004e2 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80004ee:	4b2d      	ldr	r3, [pc, #180]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	4a2c      	ldr	r2, [pc, #176]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80004f8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80004fa:	4b2a      	ldr	r3, [pc, #168]	@ (80005a4 <System_Clock_Init+0x1b8>)
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	4a29      	ldr	r2, [pc, #164]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000500:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000504:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8000506:	4b27      	ldr	r3, [pc, #156]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	4a26      	ldr	r2, [pc, #152]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800050c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8000510:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000512:	4b24      	ldr	r3, [pc, #144]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a23      	ldr	r2, [pc, #140]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000518:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800051c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 800051e:	bf00      	nop
 8000520:	4b20      	ldr	r3, [pc, #128]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000528:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800052c:	d0f8      	beq.n	8000520 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 800052e:	4b1d      	ldr	r3, [pc, #116]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	4a1c      	ldr	r2, [pc, #112]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000534:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000538:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 800053a:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800053c:	691b      	ldr	r3, [r3, #16]
 800053e:	4a19      	ldr	r2, [pc, #100]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000540:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 8000544:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000546:	4b17      	ldr	r3, [pc, #92]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000548:	691b      	ldr	r3, [r3, #16]
 800054a:	4a16      	ldr	r2, [pc, #88]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800054c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000550:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000552:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000554:	691b      	ldr	r3, [r3, #16]
 8000556:	4a13      	ldr	r2, [pc, #76]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800055c:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800055e:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a10      	ldr	r2, [pc, #64]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000564:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000568:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800056a:	bf00      	nop
 800056c:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0f9      	beq.n	800056c <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000578:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800057a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800057e:	4a09      	ldr	r2, [pc, #36]	@ (80005a4 <System_Clock_Init+0x1b8>)
 8000580:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800058a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800058c:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <System_Clock_Init+0x1b8>)
 800058e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000592:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40022000 	.word	0x40022000
 80005a4:	40021000 	.word	0x40021000

080005a8 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 80005ac:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <UART2_Init+0x40>)
 80005ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b0:	4a0d      	ldr	r2, [pc, #52]	@ (80005e8 <UART2_Init+0x40>)
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005b6:	6593      	str	r3, [r2, #88]	@ 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 80005b8:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <UART2_Init+0x40>)
 80005ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005be:	4a0a      	ldr	r2, [pc, #40]	@ (80005e8 <UART2_Init+0x40>)
 80005c0:	f023 030c 	bic.w	r3, r3, #12
 80005c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <UART2_Init+0x40>)
 80005ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ce:	4a06      	ldr	r2, [pc, #24]	@ (80005e8 <UART2_Init+0x40>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	
	UART2_GPIO_Init();
 80005d8:	f000 f80a 	bl	80005f0 <UART2_GPIO_Init>
	USART_Init(USART2);
 80005dc:	4803      	ldr	r0, [pc, #12]	@ (80005ec <UART2_Init+0x44>)
 80005de:	f000 f84f 	bl	8000680 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40004400 	.word	0x40004400

080005f0 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 80005f4:	4b21      	ldr	r3, [pc, #132]	@ (800067c <UART2_GPIO_Init+0x8c>)
 80005f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f8:	4a20      	ldr	r2, [pc, #128]	@ (800067c <UART2_GPIO_Init+0x8c>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000600:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800060a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800060e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000610:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800061a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800061e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000620:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000624:	6a1b      	ldr	r3, [r3, #32]
 8000626:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800062a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800062e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000630:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000634:	6a1b      	ldr	r3, [r3, #32]
 8000636:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800063a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800063e:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000640:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800064a:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 800064e:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000650:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800065a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800065e:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000660:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800066a:	f023 030c 	bic.w	r3, r3, #12
 800066e:	6053      	str	r3, [r2, #4]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000

08000680 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f023 0201 	bic.w	r2, r3, #1
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f023 2210 	bic.w	r2, r3, #268439552	@ 0x10001000
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f242 028d 	movw	r2, #8333	@ 0x208d
 80006be:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f043 020c 	orr.w	r2, r3, #12
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000780 <USART_Init+0x100>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d129      	bne.n	8000728 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f043 0220 	orr.w	r2, r3, #32
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f023 0210 	bic.w	r2, r3, #16
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f023 0201 	bic.w	r2, r3, #1
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <USART_Init+0x104>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d10b      	bne.n	8000748 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <USART_Init+0x108>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	4a11      	ldr	r2, [pc, #68]	@ (8000788 <USART_Init+0x108>)
 8000742:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000746:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f043 0201 	orr.w	r2, r3, #1
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000754:	bf00      	nop
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f9      	beq.n	8000756 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000762:	bf00      	nop
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800076c:	2b00      	cmp	r3, #0
 800076e:	d0f9      	beq.n	8000764 <USART_Init+0xe4>
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40004c00 	.word	0x40004c00
 8000784:	40004400 	.word	0x40004400
 8000788:	40013800 	.word	0x40013800

0800078c <USART_Read_NonBlocking>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

uint8_t USART_Read_NonBlocking (USART_TypeDef * USARTx) {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if((USARTx->ISR & USART_ISR_RXNE)){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	f003 0320 	and.w	r3, r3, #32
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <USART_Read_NonBlocking+0x1e>
		return ((uint8_t)(USARTx->RDR & 0xFF));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	e000      	b.n	80007ac <USART_Read_NonBlocking+0x20>
	}
	// if no character available
	return 0;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <USART_Write>:



void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e014      	b.n	80007f4 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80007ca:	bf00      	nop
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0f9      	beq.n	80007cc <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	851a      	strh	r2, [r3, #40]	@ 0x28
		USART_Delay(300);
 80007e6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007ea:	f000 f819 	bl	8000820 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d8e6      	bhi.n	80007ca <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80007fc:	bf00      	nop
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0f9      	beq.n	80007fe <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	61da      	str	r2, [r3, #28]
}   
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2264      	movs	r2, #100	@ 0x64
 800082c:	fb03 f202 	mul.w	r2, r3, r2
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <USART_Delay+0x3c>)
 8000832:	fba3 1302 	umull	r1, r3, r3, r2
 8000836:	1ad2      	subs	r2, r2, r3
 8000838:	0852      	lsrs	r2, r2, #1
 800083a:	4413      	add	r3, r2
 800083c:	089b      	lsrs	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000840:	bf00      	nop
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	3b01      	subs	r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1f9      	bne.n	8000842 <USART_Delay+0x22>
}
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	24924925 	.word	0x24924925

08000860 <init_systick>:
//		;
//}

// This function is to Initialize SysTick registers
void init_systick()
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
	// Use the SysTick global structure pointer to do the following in this
	// exact order with separate lines for each step:
	//
	// Disable SysTick by clearing the CTRL (CSR) register.
	SysTick->CTRL = 0;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <init_systick+0x20>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
	// Set the LOAD (RVR) to 8 million to give us a 1 milliseconds timer.
	SysTick->LOAD = 80000;
 800086a:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <init_systick+0x20>)
 800086c:	4a05      	ldr	r2, [pc, #20]	@ (8000884 <init_systick+0x24>)
 800086e:	605a      	str	r2, [r3, #4]
	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	// Set the enable bit in the CTRL (CSR) to start the timer.
	SysTick->CTRL =  (1 << 2) | (1 << 1) | (1 << 0);
 8000870:	4b03      	ldr	r3, [pc, #12]	@ (8000880 <init_systick+0x20>)
 8000872:	2207      	movs	r2, #7
 8000874:	601a      	str	r2, [r3, #0]
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000e010 	.word	0xe000e010
 8000884:	00013880 	.word	0x00013880

08000888 <SysTick_Handler>:
//	// register in a loop. When that bit is set exit this inner loop
//	// to do another pass in the outer loop of 10.
//}

void SysTick_Handler()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	static uint32_t counter = 0;
	counter++;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <SysTick_Handler+0x2c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <SysTick_Handler+0x2c>)
 8000894:	6013      	str	r3, [r2, #0]
	if(counter >= 1000){  // 1 second elapsed
 8000896:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <SysTick_Handler+0x2c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800089e:	d307      	bcc.n	80008b0 <SysTick_Handler+0x28>
		one_second_elapsed = 1;
 80008a0:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <SysTick_Handler+0x30>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
		counter = 0;
 80008a6:	4b03      	ldr	r3, [pc, #12]	@ (80008b4 <SysTick_Handler+0x2c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]

		// Call LED toggle function every second
		LED_Flash_Handler();
 80008ac:	f7ff fd6c 	bl	8000388 <LED_Flash_Handler>
	}

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000004c 	.word	0x2000004c
 80008b8:	20000048 	.word	0x20000048

080008bc <main>:
#include "LED.h"
#include "UART.h"
#include "demo.h"


int main(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 80008c2:	f7ff fd93 	bl	80003ec <System_Clock_Init>
	LED_Init(); // initialize LED
 80008c6:	f7ff fd0f 	bl	80002e8 <LED_Init>
	init_systick(); // this is for toggling
 80008ca:	f7ff ffc9 	bl	8000860 <init_systick>
	UART2_Init();
 80008ce:	f7ff fe6b 	bl	80005a8 <UART2_Init>

	display_help(); // immediately show the list of commands
 80008d2:	f000 f8ad 	bl	8000a30 <display_help>
	while (1)
	    {
	        enum command_events new_event = check_for_event();
 80008d6:	f000 f839 	bl	800094c <check_for_event>
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	        if (new_event != no_event)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b08      	cmp	r3, #8
 80008e2:	d0f8      	beq.n	80008d6 <main+0x1a>
	        {
	            if (new_event == help)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b07      	cmp	r3, #7
 80008e8:	d102      	bne.n	80008f0 <main+0x34>
	            {
	                display_help();
 80008ea:	f000 f8a1 	bl	8000a30 <display_help>
 80008ee:	e7f2      	b.n	80008d6 <main+0x1a>
	            }
	            else
	            {
	                red_led_state_machine(new_event);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f8b2 	bl	8000a5c <red_led_state_machine>
	                green_led_state_machine(new_event);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f922 	bl	8000b44 <green_led_state_machine>
	    {
 8000900:	e7e9      	b.n	80008d6 <main+0x1a>
	...

08000904 <check_name>:
} ;

// check for match on name and return the corresponding command event
// or no_event if there is no match.
enum command_events check_name( char *possible_command )
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	for ( enum command_events index = ron ; command_strings[ index ] ; index++ )
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e00f      	b.n	8000932 <check_name+0x2e>
		if ( strcmp( possible_command, command_strings[ index ] ) == 0 )
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	4a0c      	ldr	r2, [pc, #48]	@ (8000948 <check_name+0x44>)
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	4619      	mov	r1, r3
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff fc5b 	bl	80001d8 <strcmp>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d101      	bne.n	800092c <check_name+0x28>
			return index ;
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	e009      	b.n	8000940 <check_name+0x3c>
	for ( enum command_events index = ron ; command_strings[ index ] ; index++ )
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	3301      	adds	r3, #1
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <check_name+0x44>)
 8000936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1e9      	bne.n	8000912 <check_name+0xe>

	return no_event ;
 800093e:	2308      	movs	r3, #8
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000

0800094c <check_for_event>:

enum command_events check_for_event()
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0

	static char current_command[ MAX_LENGTH + 1 ] ;
	static int command_index = 0;

	// call non blocking read to build the current command buffer including processing deletes
	uint8_t received_char = USART_Read_NonBlocking(USART2);
 8000952:	4831      	ldr	r0, [pc, #196]	@ (8000a18 <check_for_event+0xcc>)
 8000954:	f7ff ff1a 	bl	800078c <USART_Read_NonBlocking>
 8000958:	4603      	mov	r3, r0
 800095a:	71fb      	strb	r3, [r7, #7]
	if(received_char != 0){
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d055      	beq.n	8000a0e <check_for_event+0xc2>
		// if an enter key
		if(received_char == '\r' || received_char == '\n'){
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b0d      	cmp	r3, #13
 8000966:	d002      	beq.n	800096e <check_for_event+0x22>
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	2b0a      	cmp	r3, #10
 800096c:	d126      	bne.n	80009bc <check_for_event+0x70>
			current_command[command_index] = '\0'; // add terminating character
 800096e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a1c <check_for_event+0xd0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a2b      	ldr	r2, [pc, #172]	@ (8000a20 <check_for_event+0xd4>)
 8000974:	2100      	movs	r1, #0
 8000976:	54d1      	strb	r1, [r2, r3]
			command_index = 0;
 8000978:	4b28      	ldr	r3, [pc, #160]	@ (8000a1c <check_for_event+0xd0>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
			USART_Write(USART2, (uint8_t*)"\r\n", strlen("\r\n"));
 800097e:	2202      	movs	r2, #2
 8000980:	4928      	ldr	r1, [pc, #160]	@ (8000a24 <check_for_event+0xd8>)
 8000982:	4825      	ldr	r0, [pc, #148]	@ (8000a18 <check_for_event+0xcc>)
 8000984:	f7ff ff18 	bl	80007b8 <USART_Write>
			enum command_events result = check_name(current_command); // save the command
 8000988:	4825      	ldr	r0, [pc, #148]	@ (8000a20 <check_for_event+0xd4>)
 800098a:	f7ff ffbb 	bl	8000904 <check_name>
 800098e:	4603      	mov	r3, r0
 8000990:	73fb      	strb	r3, [r7, #15]
			memset(current_command, 0, MAX_LENGTH*sizeof(char)); // clear the buffer
 8000992:	2214      	movs	r2, #20
 8000994:	2100      	movs	r1, #0
 8000996:	4822      	ldr	r0, [pc, #136]	@ (8000a20 <check_for_event+0xd4>)
 8000998:	f000 f9a9 	bl	8000cee <memset>
			if(result == no_event){ // if no_event then invalid command since it failed the stringcmp
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	2b08      	cmp	r3, #8
 80009a0:	d10a      	bne.n	80009b8 <check_for_event+0x6c>
				char *invalid_msg = "Invalid Command\r\n";
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <check_for_event+0xdc>)
 80009a4:	60bb      	str	r3, [r7, #8]
				USART_Write(USART2, (uint8_t*)invalid_msg, strlen(invalid_msg));
 80009a6:	68b8      	ldr	r0, [r7, #8]
 80009a8:	f7ff fc0e 	bl	80001c8 <strlen>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	68b9      	ldr	r1, [r7, #8]
 80009b2:	4819      	ldr	r0, [pc, #100]	@ (8000a18 <check_for_event+0xcc>)
 80009b4:	f7ff ff00 	bl	80007b8 <USART_Write>
			}
			return result; // return the enum command
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	e029      	b.n	8000a10 <check_for_event+0xc4>
		}else if (received_char == 0x7F) { // delete, since on mac it is delete.
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b7f      	cmp	r3, #127	@ 0x7f
 80009c0:	d113      	bne.n	80009ea <check_for_event+0x9e>
            if (command_index > 0) {
 80009c2:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <check_for_event+0xd0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	dd21      	ble.n	8000a0e <check_for_event+0xc2>
                command_index--;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <check_for_event+0xd0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <check_for_event+0xd0>)
 80009d2:	6013      	str	r3, [r2, #0]
                current_command[command_index] = '\0';
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <check_for_event+0xd0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a11      	ldr	r2, [pc, #68]	@ (8000a20 <check_for_event+0xd4>)
 80009da:	2100      	movs	r1, #0
 80009dc:	54d1      	strb	r1, [r2, r3]
                USART_Write(USART2, (uint8_t*)"\b \b", 3); // proper way to visually show the backspace
 80009de:	2203      	movs	r2, #3
 80009e0:	4912      	ldr	r1, [pc, #72]	@ (8000a2c <check_for_event+0xe0>)
 80009e2:	480d      	ldr	r0, [pc, #52]	@ (8000a18 <check_for_event+0xcc>)
 80009e4:	f7ff fee8 	bl	80007b8 <USART_Write>
 80009e8:	e011      	b.n	8000a0e <check_for_event+0xc2>
            }
        }else if (command_index < MAX_LENGTH){ // otherwise, echo the characters
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <check_for_event+0xd0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b13      	cmp	r3, #19
 80009f0:	dc0d      	bgt.n	8000a0e <check_for_event+0xc2>
			current_command[command_index++] = received_char;
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <check_for_event+0xd0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	4908      	ldr	r1, [pc, #32]	@ (8000a1c <check_for_event+0xd0>)
 80009fa:	600a      	str	r2, [r1, #0]
 80009fc:	79f9      	ldrb	r1, [r7, #7]
 80009fe:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <check_for_event+0xd4>)
 8000a00:	54d1      	strb	r1, [r2, r3]
			USART_Write(USART2, &received_char, 1);
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	2201      	movs	r2, #1
 8000a06:	4619      	mov	r1, r3
 8000a08:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <check_for_event+0xcc>)
 8000a0a:	f7ff fed5 	bl	80007b8 <USART_Write>
		}
	}
	// On enter key add code to non-blocking collect a command and return corresponding event
	return no_event ;
 8000a0e:	2308      	movs	r3, #8
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40004400 	.word	0x40004400
 8000a1c:	20000050 	.word	0x20000050
 8000a20:	20000054 	.word	0x20000054
 8000a24:	08000d98 	.word	0x08000d98
 8000a28:	08000d9c 	.word	0x08000d9c
 8000a2c:	08000db0 	.word	0x08000db0

08000a30 <display_help>:


// displays the commands
void display_help(){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	char *help_text = "***REMOTE LED CONTROL MENU***\r\n"
 8000a36:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <display_help+0x24>)
 8000a38:	607b      	str	r3, [r7, #4]
			"GON - Turn on GREEN LED\r\n"
			"GOFF - Turn off GREEN LEN\r\n"
			"RFLASH - Start flashing RED LED\r\n"
			"GFLASH - Start flashing GREEN LED\r\n"
			"ALLOFF - TURNOFF LEDS\r\n";
	USART_Write(USART2, (uint8_t*) help_text, strlen(help_text));
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fbc4 	bl	80001c8 <strlen>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <display_help+0x28>)
 8000a48:	f7ff feb6 	bl	80007b8 <USART_Write>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	08000db4 	.word	0x08000db4
 8000a58:	40004400 	.word	0x40004400

08000a5c <red_led_state_machine>:

void red_led_state_machine( enum command_events new_event )
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	static enum LED_states red_led_state = state_off ;

	switch ( red_led_state )
 8000a66:	4b35      	ldr	r3, [pc, #212]	@ (8000b3c <red_led_state_machine+0xe0>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d862      	bhi.n	8000b34 <red_led_state_machine+0xd8>
 8000a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a74 <red_led_state_machine+0x18>)
 8000a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a74:	08000a85 	.word	0x08000a85
 8000a78:	08000ab1 	.word	0x08000ab1
 8000a7c:	08000ae3 	.word	0x08000ae3
 8000a80:	08000b19 	.word	0x08000b19
	{
		case state_off : // if red led is off, possible commands are to turn it on and to flash it
			if ( new_event == ron )
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d108      	bne.n	8000a9c <red_led_state_machine+0x40>
			{
				// action: turn on red LED
				red_led_state = state_on ;
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b3c <red_led_state_machine+0xe0>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
				Red_LED_On();
 8000a90:	f7ff fc3d 	bl	800030e <Red_LED_On>
				red_flashing = 0;
 8000a94:	4b2a      	ldr	r3, [pc, #168]	@ (8000b40 <red_led_state_machine+0xe4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
			else if(new_event == rflash){
				red_led_state = state_flashing;
				red_flashing = 1;

			}
			break ;
 8000a9a:	e046      	b.n	8000b2a <red_led_state_machine+0xce>
			else if(new_event == rflash){
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d143      	bne.n	8000b2a <red_led_state_machine+0xce>
				red_led_state = state_flashing;
 8000aa2:	4b26      	ldr	r3, [pc, #152]	@ (8000b3c <red_led_state_machine+0xe0>)
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	701a      	strb	r2, [r3, #0]
				red_flashing = 1;
 8000aa8:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <red_led_state_machine+0xe4>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	601a      	str	r2, [r3, #0]
			break ;
 8000aae:	e03c      	b.n	8000b2a <red_led_state_machine+0xce>
		case state_on : // if led is on, can turn it off or flash it
			if ( new_event == roff || new_event == alloff)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d002      	beq.n	8000abc <red_led_state_machine+0x60>
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b06      	cmp	r3, #6
 8000aba:	d108      	bne.n	8000ace <red_led_state_machine+0x72>
			{
				// action: turn off red LED
				red_led_state = state_off ;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <red_led_state_machine+0xe0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
				Red_LED_Off();
 8000ac2:	f7ff fc33 	bl	800032c <Red_LED_Off>
				red_flashing = 0;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <red_led_state_machine+0xe4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
			else if(new_event == rflash){

				red_led_state = state_flashing;
				red_flashing = 1;
			}
			break ;
 8000acc:	e02f      	b.n	8000b2e <red_led_state_machine+0xd2>
			else if(new_event == rflash){
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b04      	cmp	r3, #4
 8000ad2:	d12c      	bne.n	8000b2e <red_led_state_machine+0xd2>
				red_led_state = state_flashing;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <red_led_state_machine+0xe0>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	701a      	strb	r2, [r3, #0]
				red_flashing = 1;
 8000ada:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <red_led_state_machine+0xe4>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
			break ;
 8000ae0:	e025      	b.n	8000b2e <red_led_state_machine+0xd2>
		case state_flashing : // for flashing we can turn them off
			if(new_event == roff || new_event == alloff){
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d002      	beq.n	8000aee <red_led_state_machine+0x92>
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d108      	bne.n	8000b00 <red_led_state_machine+0xa4>
				red_led_state = state_off;
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <red_led_state_machine+0xe0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
				Red_LED_Off();
 8000af4:	f7ff fc1a 	bl	800032c <Red_LED_Off>
				red_flashing = 0;
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <red_led_state_machine+0xe4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
			}else if(new_event == ron){ // or turn them on and keep them on
				red_led_state = state_on;
				red_flashing = 0;
				Red_LED_On();
			}
			break ;
 8000afe:	e018      	b.n	8000b32 <red_led_state_machine+0xd6>
			}else if(new_event == ron){ // or turn them on and keep them on
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d115      	bne.n	8000b32 <red_led_state_machine+0xd6>
				red_led_state = state_on;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <red_led_state_machine+0xe0>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
				red_flashing = 0;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <red_led_state_machine+0xe4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
				Red_LED_On();
 8000b12:	f7ff fbfc 	bl	800030e <Red_LED_On>
			break ;
 8000b16:	e00c      	b.n	8000b32 <red_led_state_machine+0xd6>
		case state_unknown :
			// action: turn off red LED
			red_led_state = state_off ;
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <red_led_state_machine+0xe0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
			Red_LED_Off();
 8000b1e:	f7ff fc05 	bl	800032c <Red_LED_Off>
			red_flashing = 0;
 8000b22:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <red_led_state_machine+0xe4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
			break ;
 8000b28:	e004      	b.n	8000b34 <red_led_state_machine+0xd8>
			break ;
 8000b2a:	bf00      	nop
 8000b2c:	e002      	b.n	8000b34 <red_led_state_machine+0xd8>
			break ;
 8000b2e:	bf00      	nop
 8000b30:	e000      	b.n	8000b34 <red_led_state_machine+0xd8>
			break ;
 8000b32:	bf00      	nop
	}
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000069 	.word	0x20000069
 8000b40:	20000040 	.word	0x20000040

08000b44 <green_led_state_machine>:

void green_led_state_machine( enum command_events new_event )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	static enum LED_states green_led_state = state_off ;


	switch ( green_led_state )
 8000b4e:	4b36      	ldr	r3, [pc, #216]	@ (8000c28 <green_led_state_machine+0xe4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d864      	bhi.n	8000c20 <green_led_state_machine+0xdc>
 8000b56:	a201      	add	r2, pc, #4	@ (adr r2, 8000b5c <green_led_state_machine+0x18>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000b6d 	.word	0x08000b6d
 8000b60:	08000b9b 	.word	0x08000b9b
 8000b64:	08000bcf 	.word	0x08000bcf
 8000b68:	08000c05 	.word	0x08000c05
	{
		case state_off :
			if ( new_event == gon )
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d107      	bne.n	8000b82 <green_led_state_machine+0x3e>
			{
				// action: turn on green LED
				green_led_state = state_on ;
 8000b72:	4b2d      	ldr	r3, [pc, #180]	@ (8000c28 <green_led_state_machine+0xe4>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
				Green_LED_On();
 8000b78:	f7ff fbe7 	bl	800034a <Green_LED_On>
				green_flashing = 0;
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c2c <green_led_state_machine+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
			}
			if(new_event == gflash){
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b05      	cmp	r3, #5
 8000b86:	d146      	bne.n	8000c16 <green_led_state_machine+0xd2>
				green_led_state = state_flashing;
 8000b88:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <green_led_state_machine+0xe4>)
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	701a      	strb	r2, [r3, #0]
				Green_LED_Toggle();
 8000b8e:	f7ff fc1e 	bl	80003ce <Green_LED_Toggle>
				green_flashing = 1;
 8000b92:	4b26      	ldr	r3, [pc, #152]	@ (8000c2c <green_led_state_machine+0xe8>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
			}
			break ;
 8000b98:	e03d      	b.n	8000c16 <green_led_state_machine+0xd2>
		case state_on :
			if ( new_event == goff || new_event == alloff)
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d002      	beq.n	8000ba6 <green_led_state_machine+0x62>
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d107      	bne.n	8000bb6 <green_led_state_machine+0x72>
			{
				// action: turn off green LED
				green_led_state = state_off ;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <green_led_state_machine+0xe4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
				Green_LED_Off();
 8000bac:	f7ff fbdc 	bl	8000368 <Green_LED_Off>
				green_flashing = 0;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <green_led_state_machine+0xe8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
			}
			if(new_event == gflash){
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b05      	cmp	r3, #5
 8000bba:	d12e      	bne.n	8000c1a <green_led_state_machine+0xd6>
				green_led_state = state_flashing;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <green_led_state_machine+0xe4>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	701a      	strb	r2, [r3, #0]
				Green_LED_Toggle();
 8000bc2:	f7ff fc04 	bl	80003ce <Green_LED_Toggle>
				green_flashing = 1;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <green_led_state_machine+0xe8>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]
			}

			break ;
 8000bcc:	e025      	b.n	8000c1a <green_led_state_machine+0xd6>
		case state_flashing :
			if(new_event == goff || new_event == alloff){
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d002      	beq.n	8000bda <green_led_state_machine+0x96>
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d108      	bne.n	8000bec <green_led_state_machine+0xa8>
				green_led_state = state_off;
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <green_led_state_machine+0xe4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
				Green_LED_Off();
 8000be0:	f7ff fbc2 	bl	8000368 <Green_LED_Off>
				green_flashing = 0;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <green_led_state_machine+0xe8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
			}else if(new_event == gon){
				green_led_state = state_on;
				green_flashing = 0;
				Green_LED_On();
			}
			break ;
 8000bea:	e018      	b.n	8000c1e <green_led_state_machine+0xda>
			}else if(new_event == gon){
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d115      	bne.n	8000c1e <green_led_state_machine+0xda>
				green_led_state = state_on;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <green_led_state_machine+0xe4>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
				green_flashing = 0;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <green_led_state_machine+0xe8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
				Green_LED_On();
 8000bfe:	f7ff fba4 	bl	800034a <Green_LED_On>
			break ;
 8000c02:	e00c      	b.n	8000c1e <green_led_state_machine+0xda>
		case state_unknown :
			// action: turn off green LED
			green_led_state = state_off ;
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <green_led_state_machine+0xe4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
			Green_LED_Off();
 8000c0a:	f7ff fbad 	bl	8000368 <Green_LED_Off>
			green_flashing = 0;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <green_led_state_machine+0xe8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
			break ;
 8000c14:	e004      	b.n	8000c20 <green_led_state_machine+0xdc>
			break ;
 8000c16:	bf00      	nop
 8000c18:	e002      	b.n	8000c20 <green_led_state_machine+0xdc>
			break ;
 8000c1a:	bf00      	nop
 8000c1c:	e000      	b.n	8000c20 <green_led_state_machine+0xdc>
			break ;
 8000c1e:	bf00      	nop
	}
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000006a 	.word	0x2000006a
 8000c2c:	20000044 	.word	0x20000044

08000c30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <SystemInit+0x64>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	4a16      	ldr	r2, [pc, #88]	@ (8000c94 <SystemInit+0x64>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c44:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <SystemInit+0x68>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a13      	ldr	r2, [pc, #76]	@ (8000c98 <SystemInit+0x68>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <SystemInit+0x68>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <SystemInit+0x68>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <SystemInit+0x68>)
 8000c5c:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000c60:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000c64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <SystemInit+0x68>)
 8000c68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <SystemInit+0x68>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a09      	ldr	r2, [pc, #36]	@ (8000c98 <SystemInit+0x68>)
 8000c74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <SystemInit+0x68>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <SystemInit+0x64>)
 8000c82:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c86:	609a      	str	r2, [r3, #8]
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	40021000 	.word	0x40021000

08000c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca0:	f7ff ffc6 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	@ (8000cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <LoopForever+0xe>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce8 <LoopForever+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cca:	f000 f819 	bl	8000d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cce:	f7ff fdf5 	bl	80008bc <main>

08000cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd2:	e7fe      	b.n	8000cd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000ce0:	08000ebc 	.word	0x08000ebc
  ldr r2, =_sbss
 8000ce4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000ce8:	2000006c 	.word	0x2000006c

08000cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC1_2_IRQHandler>

08000cee <memset>:
 8000cee:	4402      	add	r2, r0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d100      	bne.n	8000cf8 <memset+0xa>
 8000cf6:	4770      	bx	lr
 8000cf8:	f803 1b01 	strb.w	r1, [r3], #1
 8000cfc:	e7f9      	b.n	8000cf2 <memset+0x4>
	...

08000d00 <__libc_init_array>:
 8000d00:	b570      	push	{r4, r5, r6, lr}
 8000d02:	4d0d      	ldr	r5, [pc, #52]	@ (8000d38 <__libc_init_array+0x38>)
 8000d04:	4c0d      	ldr	r4, [pc, #52]	@ (8000d3c <__libc_init_array+0x3c>)
 8000d06:	1b64      	subs	r4, r4, r5
 8000d08:	10a4      	asrs	r4, r4, #2
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	42a6      	cmp	r6, r4
 8000d0e:	d109      	bne.n	8000d24 <__libc_init_array+0x24>
 8000d10:	4d0b      	ldr	r5, [pc, #44]	@ (8000d40 <__libc_init_array+0x40>)
 8000d12:	4c0c      	ldr	r4, [pc, #48]	@ (8000d44 <__libc_init_array+0x44>)
 8000d14:	f000 f818 	bl	8000d48 <_init>
 8000d18:	1b64      	subs	r4, r4, r5
 8000d1a:	10a4      	asrs	r4, r4, #2
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	42a6      	cmp	r6, r4
 8000d20:	d105      	bne.n	8000d2e <__libc_init_array+0x2e>
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d28:	4798      	blx	r3
 8000d2a:	3601      	adds	r6, #1
 8000d2c:	e7ee      	b.n	8000d0c <__libc_init_array+0xc>
 8000d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d32:	4798      	blx	r3
 8000d34:	3601      	adds	r6, #1
 8000d36:	e7f2      	b.n	8000d1e <__libc_init_array+0x1e>
 8000d38:	08000eb4 	.word	0x08000eb4
 8000d3c:	08000eb4 	.word	0x08000eb4
 8000d40:	08000eb4 	.word	0x08000eb4
 8000d44:	08000eb8 	.word	0x08000eb8

08000d48 <_init>:
 8000d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4a:	bf00      	nop
 8000d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4e:	bc08      	pop	{r3}
 8000d50:	469e      	mov	lr, r3
 8000d52:	4770      	bx	lr

08000d54 <_fini>:
 8000d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d56:	bf00      	nop
 8000d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5a:	bc08      	pop	{r3}
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	4770      	bx	lr
